<!DOCTYPE html>
<!-- saved from url=(0066)https://codelabs.developers.google.com/codelabs/mdc-102-flutter/#0 -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <meta name="viewport" content="width=device-width, minimum-scale=1.0, initial-scale=1.0, user-scalable=yes">
  <meta name="theme-color" content="#4F7DC9">
  
  <title>MDC-102 Flutter: Material Structure and Layout (Flutter)</title>
  <link rel="stylesheet" href="./MDC-102 Flutter_ Material Structure and Layout (Flutter)_files/css">
  <link rel="stylesheet" href="./MDC-102 Flutter_ Material Structure and Layout (Flutter)_files/icon">
  <link rel="stylesheet" href="./MDC-102 Flutter_ Material Structure and Layout (Flutter)_files/codelab-elements.css">
  <style>
    .success {
      color: #1e8e3e;
    }
    .error {
      color: red;
    }
  </style>
<script src="./MDC-102 Flutter_ Material Structure and Layout (Flutter)_files/analytics.js"></script></head>
<body class=" hasGoogleVoiceExt">
  <google-codelab-analytics gaid="UA-49880327-14" environment="web" category="null"></google-codelab-analytics>
  <google-codelab codelab-gaid="" id="mdc-102-flutter" environment="web" feedback-link="https://github.com/material-components/material-components-flutter-codelabs/issues/new" selected="0" google-codelab-ready="" codelab-title="MDC-102 Flutter: Material Structure and Layout (Flutter)" anayltics-ready="anayltics-ready"><div id="drawer"><div class="codelab-time-container"><div class="time-remaining" title="Time remaining"><i class="material-icons">access_time</i>14 mins remaining</div></div><div class="steps"><ol><li completed="" selected=""><a href="https://codelabs.developers.google.com/codelabs/mdc-102-flutter/#0"><span class="step"><span>Introduction</span></span></a></li><li><a href="https://codelabs.developers.google.com/codelabs/mdc-102-flutter/#1"><span class="step"><span>Set up your Flutter environment</span></span></a></li><li><a href="https://codelabs.developers.google.com/codelabs/mdc-102-flutter/#2"><span class="step"><span>Download the codelab starter app</span></span></a></li><li><a href="https://codelabs.developers.google.com/codelabs/mdc-102-flutter/#3"><span class="step"><span>Add a top app bar</span></span></a></li><li><a href="https://codelabs.developers.google.com/codelabs/mdc-102-flutter/#4"><span class="step"><span>Add a card in a grid</span></span></a></li><li><a href="https://codelabs.developers.google.com/codelabs/mdc-102-flutter/#5"><span class="step"><span>Make a card collection</span></span></a></li><li><a href="https://codelabs.developers.google.com/codelabs/mdc-102-flutter/#6"><span class="step"><span>Recap</span></span></a></li></ol></div><div class="metadata"><a target="_blank" href="https://github.com/material-components/material-components-flutter-codelabs/issues/new"><i class="material-icons">bug_report</i> Report a mistake</a></div></div><div id="codelab-title"><div id="codelab-nav-buttons"><a href="https://codelabs.developers.google.com/" id="arrow-back"><i class="material-icons">close</i></a><a href="https://codelabs.developers.google.com/codelabs/mdc-102-flutter/#" id="menu"><i class="material-icons">menu</i></a></div><h1 class="title">MDC-102 Flutter: Material Structure and Layout (Flutter)</h1><div class="codelab-time-container"><div class="time-remaining" title="Time remaining"><i class="material-icons">access_time</i>14 mins remaining</div></div><devsite-user></devsite-user></div><div id="main"><div id="steps"><google-codelab-step label="Introduction" duration="0" step="1" selected=""><div class="instructions"><div class="inner"><h2 is-upgraded="" class="step-title">1. Introduction</h2>
        <table>
<tbody><tr><td colspan="1" rowspan="1"><p class="image-container"><img alt="logo_components_color_2x_web_96dp.png" style="width: 207.50px" src="./MDC-102 Flutter_ Material Structure and Layout (Flutter)_files/logo_components_color_2x_web_96dp.png"></p>
</td><td colspan="1" rowspan="1"><p>Material Components (MDC) help developers implement Material Design. Created by a team of engineers and UX designers at Google, MDC features dozens of beautiful and functional UI components and is available for Android, iOS, web and Flutter.</p>
<p>material.io/develop</p>
</td></tr>
</tbody></table>

<p>In codelab <a href="https://codelabs.developers.google.com/codelabs/mdc-101-flutter" target="_blank">MDC-101</a>, you used two Material Components to build a login page: text fields and buttons with ink ripples. Now let's expand upon this foundation by adding navigation, structure, and data.</p>
<h2 is-upgraded=""><strong>What you'll build</strong></h2>
<p>In this codelab, you'll build a home screen for an app called <strong>Shrine</strong>, an e-commerce app that sells clothing and home goods. It will contain:</p>
<ul>
<li>A top app bar </li>
<li>A grid list full of products</li>
</ul>
<table>
<tbody><tr><td colspan="1" rowspan="1"><p>Android</p>
</td><td colspan="1" rowspan="1"><p>iOS</p>
</td></tr>
<tr><td colspan="1" rowspan="1"><p class="image-container"><img style="width: 298.00px" src="./MDC-102 Flutter_ Material Structure and Layout (Flutter)_files/24cb72fa03ad9b0a.png"></p>
</td><td colspan="1" rowspan="1"><p class="image-container"><img style="width: 298.00px" src="./MDC-102 Flutter_ Material Structure and Layout (Flutter)_files/e09674a29793cbc3.png"></p>
</td></tr>
</tbody></table>
<aside class="special"><table>
<tbody><tr><td colspan="1" rowspan="1"><p>By the end of MDC-104, you'll build an app that looks like this:</p>
<p class="image-container"><img style="width: 189.00px" src="./MDC-102 Flutter_ Material Structure and Layout (Flutter)_files/e23a024b60357e32.png"></p>
</td><td colspan="1" rowspan="1"><p>This is the second of 4 codelabs that will guide you through building an app for a product called Shrine. We recommend that you do all of the codelabs in order as they progress through tasks step-by-step.</p>
<p>The related codelabs can be found at:</p>
<ul>
<li><a href="https://codelabs.developers.google.com/codelabs/mdc-101-flutter" target="_blank">MDC-101: Material Components (MDC) Basics</a></li>
<li><a href="https://codelabs.developers.google.com/codelabs/mdc-103-flutter" target="_blank">MDC-103: Material Design Theming with Color, Shape, Elevation and Type</a></li>
<li><a href="https://codelabs.developers.google.com/codelabs/mdc-104-flutter" target="_blank">MDC-104: Material Design Advanced Components</a>.</li>
</ul>
</td></tr>
</tbody></table>
</aside>
<h2 is-upgraded=""><strong>MDC components in this codelab</strong></h2>
<ul>
<li>Top app bar</li>
<li>Grids</li>
<li>Cards</li>
</ul>
<aside class="special"><p>In this codelab, you'll use the default components provided by MDC-Flutter. You'll learn to customize them in <a href="https://codelabs.developers.google.com/codelabs/mdc-103-flutter" target="_blank">MDC-103: Material Design Theming with Color, Shape, Elevation and Type</a>.</p>
</aside>
<google-codelab-survey survey-id="mdc-102-flutter-1" upgraded="">


<div class="survey-questions" survey-name="mdc-102-flutter-1"><div class="survey-question-wrapper"><h4>How would you rate your level of experience with Flutter development?</h4><div class="survey-question-options"><label class="survey-option-wrapper" id="how-would-you-rate-your-level-of-experience-with-flutter-development--novice-label" for="how-would-you-rate-your-level-of-experience-with-flutter-development--novice"><span class="option-text">Novice</span><input type="radio" id="how-would-you-rate-your-level-of-experience-with-flutter-development--novice" name="How would you rate your level of experience with Flutter development?"><span class="custom-radio-button"></span></label><label class="survey-option-wrapper" id="how-would-you-rate-your-level-of-experience-with-flutter-development--intermediate-label" for="how-would-you-rate-your-level-of-experience-with-flutter-development--intermediate"><span class="option-text">Intermediate</span><input type="radio" id="how-would-you-rate-your-level-of-experience-with-flutter-development--intermediate" name="How would you rate your level of experience with Flutter development?"><span class="custom-radio-button"></span></label><label class="survey-option-wrapper" id="how-would-you-rate-your-level-of-experience-with-flutter-development--proficient-label" for="how-would-you-rate-your-level-of-experience-with-flutter-development--proficient"><span class="option-text">Proficient</span><input type="radio" id="how-would-you-rate-your-level-of-experience-with-flutter-development--proficient" name="How would you rate your level of experience with Flutter development?"><span class="custom-radio-button"></span></label></div></div></div></google-codelab-survey>


      </div></div></google-codelab-step><google-codelab-step label="Set up your Flutter environment" duration="2" step="2"><div class="instructions"><div class="inner"><h2 is-upgraded="" class="step-title">2. Set up your Flutter environment</h2>
        <h2 is-upgraded="">Before you start</h2>
<p>To start developing mobile apps with Flutter you need to:</p>
<ol type="1" start="1">
<li>Download and install the Flutter SDK.</li>
<li>Update your PATH with the Flutter SDK.</li>
<li>Install Android Studio with the Flutter and Dart plugins, or your favorite editor.</li>
<li>Install an Android emulator, an iOS simulator (requires a Mac with Xcode), or use a physical device.</li>
</ol>
<p>For more information about Flutter installation, see <a href="https://flutter.dev/docs/get-started/install" target="_blank">Get Started: Install</a>. To set up an editor, see <a href="https://flutter.dev/docs/get-started/editor?tab=androidstudio" target="_blank">Get Started: Set up an editor</a>. When installing an Android emulator, feel free to use the default options such as a Pixel 3 phone with the latest System Image. It's recommended but not required to enable VM acceleration. After the above 4 steps have been completed, you can return to the codelab. To complete this codelab, you only need to install Flutter for one platform (Android or iOS).</p>
<h2 is-upgraded="">Ensure your Flutter SDK is in the right state</h2>
<p>Before proceeding with this codelab, make sure that your SDK is in the right state. If the Flutter SDK was installed previously, then use <code>flutter upgrade</code> to ensure that the SDK is at the latest state.</p>
<pre> flutter upgrade</pre>
<p>Running <code>flutter upgrade</code> will automatically run <code>flutter doctor.</code> If this a fresh Flutter install and no upgrade was necessary, then run <code>flutter doctor</code> manually. It will report if there are any dependencies you need to install to complete the setup. Feel free to ignore the check marks that are not relevant for you (for example Xcode if you do not intend to develop for iOS).</p>
<pre> flutter doctor</pre>
<h3 class="faq" is-upgraded="">Frequently Asked Questions</h3>
<ul class="faq">
<li><a href="https://stackoverflow.com/questions/50321966/where-is-darts-sdk-located-within-flutter-folder" target="_blank">Where is Dart's SDK located within /flutter folder?</a></li>
<li><a href="https://stackoverflow.com/questions/50706353/how-to-accept-android-licenses" target="_blank">How do I accept Android licenses?</a></li>
<li><a href="https://developer.android.com/studio/run/managing-avds.html" target="_blank">How do I create an Android virtual device in Android Studio?</a></li>
</ul>



      </div></div></google-codelab-step><google-codelab-step label="Download the codelab starter app" duration="0" step="3"><div class="instructions"><div class="inner"><h2 is-upgraded="" class="step-title">3. Download the codelab starter app</h2>
        <h2 is-upgraded=""><strong>Continuing from MDC-101?</strong></h2>
<p>If you completed MDC-101, your code should be prepared for this codelab. Skip to step: <em>Add a top app bar</em>.</p>
<h2 is-upgraded="">Starting from scratch?</h2>

<h3 is-upgraded="">Download the starter codelab app</h3>
<p><a href="https://github.com/material-components/material-components-flutter-codelabs/archive/102-starter_and_101-complete.zip" target="_blank"><paper-button class="colored" raised=""><iron-icon icon="file-download"></iron-icon>Download starter app</paper-button></a> </p>
<p>The starter app is located in the <code>material-components-flutter-codelabs-102-starter_and_101-complete/mdc_100_series</code> directory. </p>
<h2 is-upgraded=""><strong>...or clone it from GitHub</strong></h2>
<p>To clone this codelab from GitHub, run the following commands:</p>
<pre>git clone https://github.com/material-components/material-components-flutter-codelabs.git
cd material-components-flutter-codelabs/mdc_100_series
git checkout 102-starter_and_101-complete</pre>
<aside class="warning"><p>For more help: <a href="https://help.github.com/articles/cloning-a-repository/" target="_blank">Cloning a repository from GitHub</a></p>
</aside>

<aside class="special"><h2 is-upgraded=""><strong>The right branch</strong></h2>
<p>Codelabs MDC-101 through 104 consecutively build upon each other. So when you finish the code for 102, it becomes the starter code for 103! The code is divided across different branches, and you can list them all with this command: </p>
<p><code>git branch --list</code></p>
<p>To see the completed code, checkout the <code>103-starter_and_102-complete</code> branch. </p>
</aside>
<h2 is-upgraded=""><strong>Set up your project</strong></h2>
<p>The following instructions assume you're using Android Studio (IntelliJ).</p>
<aside class="special"><p><strong>Tip: </strong>Make sure you have the <a href="https://flutter.io/get-started/editor/#androidstudio" target="_blank">plugins installed for Flutter and Dart</a>.</p>
</aside>
<h2 is-upgraded=""><strong>Open the project</strong></h2>
<table>
<tbody><tr><td colspan="1" rowspan="1"><p>1. Open Android Studio. </p>
</td></tr>
<tr><td colspan="1" rowspan="1"><p>2. If you see the welcome screen, click <strong>Open an existing Android Studio project</strong>.</p>
<p class="image-container"><img style="width: 357.20px" src="./MDC-102 Flutter_ Material Structure and Layout (Flutter)_files/open an existing project.png"></p>
</td></tr>
<tr><td colspan="1" rowspan="1"><p>3. Navigate to the <code>material-components-flutter-codelabs/mdc_100_series</code> directory and click Open. The project should open. </p>
<p><strong>You can ignore any errors you see in Dart Analysis until you've built the project once.</strong></p>
<p class="image-container"><img style="width: 300.12px" src="./MDC-102 Flutter_ Material Structure and Layout (Flutter)_files/folder structure.png"></p>
</td></tr>
<tr><td colspan="1" rowspan="1"><p>4. If prompted: </p>
<ul>
<li>Install any  platform and plugin updates or FlutterRunConfigurationType.</li>
<li>If the Dart or Flutter SDK is not configured, set the <a href="https://stackoverflow.com/questions/50321966/where-is-darts-sdk-located-within-flutter-folder" target="_blank">Flutter SDK path for the Flutter plugin</a>.</li>
<li>Configure Android frameworks.</li>
<li>Click on "Get dependencies" or "Run ‘flutter packages get'".</li>
</ul>
<p>Then restart Android Studio.</p>
<p class="image-container"><img style="width: 298.00px" src="./MDC-102 Flutter_ Material Structure and Layout (Flutter)_files/Screen Shot 2018-04-24 at 12.17.22 PM.png"></p>
<p class="image-container"><img style="width: 298.50px" src="./MDC-102 Flutter_ Material Structure and Layout (Flutter)_files/Frameworks Detected.png"><img style="width: 610.00px" src="./MDC-102 Flutter_ Material Structure and Layout (Flutter)_files/packages get.png"></p>
</td></tr>
</tbody></table>
<h2 is-upgraded=""><strong>Run the starter app</strong></h2>
<p>The following instructions assume you're testing on an Android emulator or device but you can also test on an iOS Simulator or device if you have Xcode installed. </p>
<table>
<tbody><tr><td colspan="1" rowspan="1"><p> 1. Select the device or emulator.</p>
<p>If the Android emulator is not already running, select<strong> Tools -&gt; Android -&gt; AVD Manager</strong> to <a href="https://developer.android.com/studio/run/managing-avds.html#createavd" target="_blank">create a virtual device and start the emulator</a>. If an AVD already exists, you can start the emulator directly from the device selector in Android Studio, as shown in the next step.</p>
<p>(For the iOS Simulator, if it is not already running, launch the simulator on your development machine by selecting<strong> Flutter Device Selection -&gt; Open iOS Simulator</strong>.)</p>
<p class="image-container"><img style="width: 482.03px" src="./MDC-102 Flutter_ Material Structure and Layout (Flutter)_files/Screenshot 2020-02-11 at 12.35.21.png"></p>
</td></tr>
<tr><td colspan="1" rowspan="1"><p>2. Start your Flutter app:</p>
<ul>
<li>Look for the Flutter Device Selection dropdown menu at the top of your editor screen, and select the device (for example, iPhone SE or Android SDK built for &lt;version&gt;).</li>
<li>Press the <strong>Play</strong> icon (<img style="width: 41.00px" src="./MDC-102 Flutter_ Material Structure and Layout (Flutter)_files/Screen Shot 2018-04-24 at 12.52.25 PM.png">).</li>
</ul>
<p class="image-container"><img style="width: 610.00px" src="./MDC-102 Flutter_ Material Structure and Layout (Flutter)_files/Screenshot 2020-02-11 at 13.18.39.png"></p>
</td></tr>
</tbody></table>
<aside class="warning"><p>If you were unable to run the app successfully, stop and troubleshoot your developer environment. Try navigating to <code>material-components-flutter-codelabs</code> or if you downloaded the .zip file <code>material-components-flutter-codelabs-...</code>) in the terminal and running <code>flutter create mdc_100_series</code>.</p>
</aside>

<p>Success! You should see the Shrine login page from the MDC-101 codelab in the simulator or emulator.</p>
<table>
<tbody><tr><td colspan="1" rowspan="1"><p>Android</p>
</td><td colspan="1" rowspan="1"><p>iOS</p>
</td></tr>
<tr><td colspan="1" rowspan="1"><p class="image-container"><img style="width: 298.00px" src="./MDC-102 Flutter_ Material Structure and Layout (Flutter)_files/61b1e8713b49d00a.png"></p>
</td><td colspan="1" rowspan="1"><p class="image-container"><img style="width: 298.00px" src="./MDC-102 Flutter_ Material Structure and Layout (Flutter)_files/7c6dc28cdc4e643b.png"></p>
</td></tr>
</tbody></table>
<p>Now that the login screen looks good, let's populate the app with some products.</p>


      </div></div></google-codelab-step><google-codelab-step label="Add a top app bar" duration="6" step="4"><div class="instructions"><div class="inner"><h2 is-upgraded="" class="step-title">4. Add a top app bar</h2>
        <p>Right now, if you click the "Next" button you will be able to see the home  screen that says "You did it!". That's great! But now our user has no actions to take, or any sense of where they are in the app. To help with that, it's time to add navigation.</p>
<aside class="special"><p><strong>Navigation</strong> refers to the components, interactions, visual cues, and information architecture that enable users to move through an app. It helps make content and features discoverable, so that tasks are easy to complete.</p>
<p>Learn more in the <a href="https://material.io/design/navigation/" target="_blank">Navigation article</a> in the Material Guidelines.</p>
</aside>
<p>Material Design offers navigation patterns that ensure a high degree of usability. One of the most visible components is a top app bar. </p>
<aside class="special"><p>You may know the top app bar as a "Navigation Bar" in iOS, or as simply an "App Bar" or "Header."</p>
</aside>
<p>To provide navigation and give users quick access to other actions, let's add a top app bar.</p>
<h2 is-upgraded=""><strong>Add an AppBar widget</strong></h2>
<p>In <code>home.dart</code>, add an AppBar to the Scaffold:</p>
<pre><code><span class="pln">  </span><span class="com">// TODO: Add app bar (102)</span><span class="pln">
  appBar</span><span class="pun">:</span><span class="pln"> </span><span class="typ">AppBar</span><span class="pun">(</span><span class="pln">
    </span><span class="com">// TODO: Add buttons and title (102)</span><span class="pln">
  </span><span class="pun">),</span></code></pre>
<p>Adding the <strong>AppBar</strong> to the Scaffold's <code>appBar:</code> field, gives us perfect layout for free, keeping the AppBar at the top of the page and the body underneath.</p>
<aside class="special"><p><strong>Scaffold</strong> is an important widget in MaterialApps. It provides convenient APIs for displaying all sorts or common Material Components like drawers, snack bars, and bottom sheets. It can even help layout a Floating Action Button.</p>
<p>Learn more about Scaffold in its <a href="https://docs.flutter.io/flutter/material/Scaffold-class.html" target="_blank">Flutter documentation</a>.</p>
</aside>
<p>Save the project. When the Shrine app updates, click <strong>Next</strong> to see the home screen.</p>
<table>
<tbody><tr><td colspan="1" rowspan="1"><p>Android</p>
</td><td colspan="1" rowspan="1"><p>iOS</p>
</td></tr>
<tr><td colspan="1" rowspan="1"><p class="image-container"><img style="width: 298.00px" src="./MDC-102 Flutter_ Material Structure and Layout (Flutter)_files/c0e07dd4cb7990ec.png"></p>
</td><td colspan="1" rowspan="1"><p class="image-container"><img style="width: 298.00px" src="./MDC-102 Flutter_ Material Structure and Layout (Flutter)_files/7aac9159c56aa110.png"></p>
</td></tr>
</tbody></table>
<p>AppBar looks great but it needs a title.</p>
<aside class="warning"><p>If the app doesn't update, click the "Play" button again, or click "Stop" followed by "Play."</p>
</aside>

<h2 is-upgraded=""><strong>Add a Text widget</strong></h2>
<p>In <code>home.dart</code>, add a title to the AppBar:</p>
<pre><code><span class="com">// TODO: Add app bar (102)  </span><span class="pln">
  appBar</span><span class="pun">:</span><span class="pln"> </span><span class="typ">AppBar</span><span class="pun">(</span><span class="pln">
    </span><span class="com">// TODO: Add buttons and title (102)</span><span class="pln">
    title</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Text</span><span class="pun">(</span><span class="str">'SHRINE'</span><span class="pun">),</span><span class="pln">
    </span><span class="com">// TODO: Add trailing buttons (102)</span></code></pre>
<p>Save the project.</p>
<table>
<tbody><tr><td colspan="1" rowspan="1"><p>Android</p>
</td><td colspan="1" rowspan="1"><p>iOS</p>
</td></tr>
<tr><td colspan="1" rowspan="1"><p class="image-container"><img style="width: 298.00px" src="./MDC-102 Flutter_ Material Structure and Layout (Flutter)_files/e45285cdb72b486d.png"></p>
</td><td colspan="1" rowspan="1"><p class="image-container"><img style="width: 298.00px" src="./MDC-102 Flutter_ Material Structure and Layout (Flutter)_files/392491678976939f.png"></p>
</td></tr>
</tbody></table>
<aside class="special"><p>By now, you might have noticed what we call a 'platform variance'. Material knows that each platform, Android, iOS, Web, is different. And that users have different expectations for them. For example, on iOS, titles are almost always centered and that is the default behavior supplied by UIKit. On Android, it's left aligned. So if you're using an Android emulator or device, your title should be aligned to the left. For an iOS simulator or device, it should be centered.</p>
<p>See the Material <a href="https://material.io/design/platform-guidance/cross-platform-adaptation.html#cross-platform-guidelines" target="_blank">article</a> on Cross-platform Adaptation for more information. </p>
</aside>
<p>Many app bars have a button next to the title. Let's add a menu icon in our app.</p>
<h2 is-upgraded=""><strong>Add a leading IconButton</strong></h2>
<p>While still in <code>home.dart</code>, set an IconButton for the AppBar's <code>leading:</code> field. (Put it before the <code>title:</code> field to mimic the leading-to-trailing order):</p>
<pre><code><span class="pln">    </span><span class="com">// TODO: Add buttons and title (102)</span><span class="pln">
    leading</span><span class="pun">:</span><span class="pln"> </span><span class="typ">IconButton</span><span class="pun">(</span><span class="pln">
      icon</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Icon</span><span class="pun">(</span><span class="pln">
        </span><span class="typ">Icons</span><span class="pun">.</span><span class="pln">menu</span><span class="pun">,</span><span class="pln">
        semanticLabel</span><span class="pun">:</span><span class="pln"> </span><span class="str">'menu'</span><span class="pun">,</span><span class="pln">
      </span><span class="pun">),</span><span class="pln">
      onPressed</span><span class="pun">:</span><span class="pln"> </span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">print</span><span class="pun">(</span><span class="str">'Menu button'</span><span class="pun">);</span><span class="pln">
      </span><span class="pun">},</span><span class="pln">
    </span><span class="pun">),</span></code></pre>
<p>Save the project.</p>
<table>
<tbody><tr><td colspan="1" rowspan="1"><p>Android</p>
</td><td colspan="1" rowspan="1"><p>iOS</p>
</td></tr>
<tr><td colspan="1" rowspan="1"><p class="image-container"><img style="width: 298.00px" src="./MDC-102 Flutter_ Material Structure and Layout (Flutter)_files/794577d0ea758040.png"></p>
</td><td colspan="1" rowspan="1"><p class="image-container"><img style="width: 298.00px" src="./MDC-102 Flutter_ Material Structure and Layout (Flutter)_files/598cf2815d829b9b.png"></p>
</td></tr>
</tbody></table>
<p>The menu icon (also known as the "hamburger") shows up right where you'd expect it.</p>
<aside class="special"><p>The <a href="https://docs.flutter.io/flutter/material/IconButton-class.html" target="_blank"><strong>IconButton</strong></a> class is a convenient way to incorporate <a href="http://material.io/icons" target="_blank">Material Icons</a> in your app. It takes an <strong>Icon</strong> widget. Flutter has a whole collection of icons in the <strong>Icons</strong> class. It automatically imports the icons based on a mapping of const strings.</p>
<p>Learn more about the Icons class in its <a href="https://docs.flutter.io/flutter/material/Icons-class.html" target="_blank">Flutter documentation</a>. And learn more about the Icon widget in its <a href="https://docs.flutter.io/flutter/widgets/Icon-class.html" target="_blank">Flutter documentation</a>.</p>
</aside>
<p>You can also add buttons to the trailing side of the title. In Flutter, these are called "actions".</p>
<aside class="special"><p><strong>Leading</strong> and <strong>trailing</strong> are terms that express direction, referring to the beginning and ending of text lines in a language-agnostic way. When working in an LTR (left-to-right) language like English, <em>leading</em> means <em>left</em> and <em>trailing</em> means <em>right</em>. In an RTL (right-to-left) language like Arabic, <em>leading</em> means <em>right</em> and <em>trailing</em> means <em>left</em>. </p>
<p>For more information on UI Mirroring, see the Material Design guidelines on <a href="https://material.io/guidelines/usability/bidirectionality.html" target="_blank">Bidirectionality</a>.</p>
</aside>
<h2 is-upgraded=""><strong>Add actions</strong></h2>
<p>There's room for two more IconButtons.</p>
<p>Add them to the AppBar instance after the title:</p>
<pre><code><span class="com">// TODO: Add trailing buttons (102)</span><span class="pln">
actions</span><span class="pun">:</span><span class="pln"> </span><span class="pun">&lt;</span><span class="typ">Widget</span><span class="pun">&gt;[</span><span class="pln">
  </span><span class="typ">IconButton</span><span class="pun">(</span><span class="pln">
    icon</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Icon</span><span class="pun">(</span><span class="pln">
      </span><span class="typ">Icons</span><span class="pun">.</span><span class="pln">search</span><span class="pun">,</span><span class="pln">
      semanticLabel</span><span class="pun">:</span><span class="pln"> </span><span class="str">'search'</span><span class="pun">,</span><span class="pln">
    </span><span class="pun">),</span><span class="pln">
    onPressed</span><span class="pun">:</span><span class="pln"> </span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
      </span><span class="kwd">print</span><span class="pun">(</span><span class="str">'Search button'</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">},</span><span class="pln">
  </span><span class="pun">),</span><span class="pln">
  </span><span class="typ">IconButton</span><span class="pun">(</span><span class="pln">
    icon</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Icon</span><span class="pun">(</span><span class="pln">
      </span><span class="typ">Icons</span><span class="pun">.</span><span class="pln">tune</span><span class="pun">,</span><span class="pln">
      semanticLabel</span><span class="pun">:</span><span class="pln"> </span><span class="str">'filter'</span><span class="pun">,</span><span class="pln">
    </span><span class="pun">),</span><span class="pln">
    onPressed</span><span class="pun">:</span><span class="pln"> </span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
      </span><span class="kwd">print</span><span class="pun">(</span><span class="str">'Filter button'</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">},</span><span class="pln">
  </span><span class="pun">),</span><span class="pln">
</span><span class="pun">],</span></code></pre>
<p>Save your project. Your home screen should look like this:</p>
<table>
<tbody><tr><td colspan="1" rowspan="1"><p>Android</p>
</td><td colspan="1" rowspan="1"><p>iOS</p>
</td></tr>
<tr><td colspan="1" rowspan="1"><p class="image-container"><img style="width: 298.00px" src="./MDC-102 Flutter_ Material Structure and Layout (Flutter)_files/d3a33ae1359e9801.png"></p>
</td><td colspan="1" rowspan="1"><p class="image-container"><img style="width: 298.00px" src="./MDC-102 Flutter_ Material Structure and Layout (Flutter)_files/a383f4dcd3267d2a.png"></p>
</td></tr>
</tbody></table>
<p>Now the app has a leading button, a title, and two actions on the right side. The app bar also displays <strong>elevation</strong> using a subtle shadow that shows it's on a different layer than the content.</p>
<aside class="special"><p>On an Icon class, the <strong>SemanticLabel</strong> field is a common way to add accessibility information in Flutter. It's a lot like <a href="https://support.google.com/accessibility/android/answer/7158690?hl=en" target="_blank">Android's Content Labels</a> and <a href="https://developer.apple.com/documentation/uikit/accessibility/uiaccessibility?language=objc" target="_blank">iOS' UIAccessibility <code>accessibilityLabel</code></a>. You'll find it on many classes.</p>
<p>The information in this field better explains what this button does to  people who use screen readers</p>
<p>For a Widget that doesn't have a <code>semanticLabel:</code> field, you can wrap it in a <strong>Semantics</strong> widget. Learn more about the Semantics widget in its <a href="https://docs.flutter.io/flutter/widgets/Semantics-class.html" target="_blank">Flutter documentation</a>.</p>
</aside>


      </div></div></google-codelab-step><google-codelab-step label="Add a card in a grid" duration="6" step="5"><div class="instructions"><div class="inner"><h2 is-upgraded="" class="step-title">5. Add a card in a grid</h2>
        <p>Now that our app has some structure, let's organize the content by placing it into cards. </p>
<aside class="special"><p><strong>Cards</strong> are independent elements that display content and actions on a single subject.  They're a flexible way to present similar content as a collection. </p>
<p>Learn more about cards in the <a href="https://material.io/guidelines/components/cards.html" target="_blank">Cards article</a> of the Material Guidelines. </p>
<p>Learn more about the Card widget in <a href="https://flutter.io/tutorials/layout/" target="_blank">Building Layouts in Flutter</a>.</p>
</aside>
<h2 is-upgraded=""><strong>Add a GridView </strong></h2>
<p>Let's start by adding one card underneath the top app bar. The <strong>Card</strong> widget alone doesn't have enough information to lay itself out where we could see it, so we'll want to encapsulate it in a <strong>GridView</strong> widget.</p>
<p>Replace the Center in the body of the Scaffold with a GridView:</p>
<pre><code><span class="com">// TODO: Add a grid view (102)</span><span class="pln">
body</span><span class="pun">:</span><span class="pln"> </span><span class="typ">GridView</span><span class="pun">.</span><span class="pln">count</span><span class="pun">(</span><span class="pln">
  crossAxisCount</span><span class="pun">:</span><span class="pln"> </span><span class="lit">2</span><span class="pun">,</span><span class="pln">
  padding</span><span class="pun">:</span><span class="pln"> </span><span class="typ">EdgeInsets</span><span class="pun">.</span><span class="pln">all</span><span class="pun">(</span><span class="lit">16.0</span><span class="pun">),</span><span class="pln">
  childAspectRatio</span><span class="pun">:</span><span class="pln"> </span><span class="lit">8.0</span><span class="pln"> </span><span class="pun">/</span><span class="pln"> </span><span class="lit">9.0</span><span class="pun">,</span><span class="pln">
  </span><span class="com">// TODO: Build a grid of cards (102)</span><span class="pln">
  children</span><span class="pun">:</span><span class="pln"> </span><span class="pun">&lt;</span><span class="typ">Widget</span><span class="pun">&gt;[</span><span class="typ">Card</span><span class="pun">()],</span><span class="pln">
</span><span class="pun">),</span></code></pre>
<p>Let's unpack that code. The GridView invokes the <code>count()</code> constructor since the number of items it displays is countable and not infinite. But it needs some information to define its layout. </p>
<p>The <code>crossAxisCount:</code> specifies how many items across. We want 2 columns. </p>
<aside class="special"><p><strong>Cross axis</strong> in Flutter means the non-scrolling axis. The scrolling direction is called the <strong>main axis</strong>. So, if you have vertical scrolling, like GridView does by default, then the cross axis is horizontal. </p>
<p>Learn more in <a href="https://flutter.io/tutorials/layout/" target="_blank">Building Layouts</a>.</p>
</aside>
<p>The <code>padding:</code> field provides space on all 4 sides of the GridView. Of course you can't see the padding on the trailing or bottom sides because there's no GridView children next to them yet.</p>
<p>The <code>childAspectRatio:</code> field identifies the size of the items based on an aspect ratio (width over height). </p>
<p>By default, GridView makes tiles that are all the same size. </p>
<p>Adding that all together, the GridView calculates each child's width as follows: <code>([width of the entire grid] - [left padding] - [right padding]) / number of columns</code>. Using the values we have: <code>([width of the entire grid] - 16 - 16) / 2</code>. </p>
<p>The height is calculated from the width, by applying the aspect ratio:: <code>([width of the entire grid] - 16 - 16) / 2 * 9 / 8</code>. We flipped 8 and 9 because we are starting with the width and calculating the height and not the other way around.</p>
<p>We have one card but it's empty. Let's add child widgets to our card.</p>
<h2 is-upgraded=""><strong>Layout the contents</strong></h2>
<p>Cards should have regions for an image, a title, and secondary text.</p>
<p>Update the children of the GridView:</p>
<pre><code><span class="com">// TODO: Build a grid of cards (102)</span><span class="pln">
children</span><span class="pun">:</span><span class="pln"> </span><span class="pun">&lt;</span><span class="typ">Widget</span><span class="pun">&gt;[</span><span class="pln">
  </span><span class="typ">Card</span><span class="pun">(</span><span class="pln">
    clipBehavior</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Clip</span><span class="pun">.</span><span class="pln">antiAlias</span><span class="pun">,</span><span class="pln">
    child</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Column</span><span class="pun">(</span><span class="pln">
      crossAxisAlignment</span><span class="pun">:</span><span class="pln"> </span><span class="typ">CrossAxisAlignment</span><span class="pun">.</span><span class="pln">start</span><span class="pun">,</span><span class="pln">
      children</span><span class="pun">:</span><span class="pln"> </span><span class="pun">&lt;</span><span class="typ">Widget</span><span class="pun">&gt;[</span><span class="pln">
        </span><span class="typ">AspectRatio</span><span class="pun">(</span><span class="pln">
          aspectRatio</span><span class="pun">:</span><span class="pln"> </span><span class="lit">18.0</span><span class="pln"> </span><span class="pun">/</span><span class="pln"> </span><span class="lit">11.0</span><span class="pun">,</span><span class="pln">
          child</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Image</span><span class="pun">.</span><span class="pln">asset</span><span class="pun">(</span><span class="str">'assets/diamond.png'</span><span class="pun">),</span><span class="pln">
        </span><span class="pun">),</span><span class="pln">
        </span><span class="typ">Padding</span><span class="pun">(</span><span class="pln">
          padding</span><span class="pun">:</span><span class="pln"> </span><span class="typ">EdgeInsets</span><span class="pun">.</span><span class="pln">fromLTRB</span><span class="pun">(</span><span class="lit">16.0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">12.0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">16.0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">8.0</span><span class="pun">),</span><span class="pln">
          child</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Column</span><span class="pun">(</span><span class="pln">
            crossAxisAlignment</span><span class="pun">:</span><span class="pln"> </span><span class="typ">CrossAxisAlignment</span><span class="pun">.</span><span class="pln">start</span><span class="pun">,</span><span class="pln">
            children</span><span class="pun">:</span><span class="pln"> </span><span class="pun">&lt;</span><span class="typ">Widget</span><span class="pun">&gt;[</span><span class="pln">
              </span><span class="typ">Text</span><span class="pun">(</span><span class="str">'Title'</span><span class="pun">),</span><span class="pln">
              </span><span class="typ">SizedBox</span><span class="pun">(</span><span class="pln">height</span><span class="pun">:</span><span class="pln"> </span><span class="lit">8.0</span><span class="pun">),</span><span class="pln">
              </span><span class="typ">Text</span><span class="pun">(</span><span class="str">'Secondary Text'</span><span class="pun">),</span><span class="pln">
            </span><span class="pun">],</span><span class="pln">
          </span><span class="pun">),</span><span class="pln">
        </span><span class="pun">),</span><span class="pln">
      </span><span class="pun">],</span><span class="pln">
    </span><span class="pun">),</span><span class="pln">
  </span><span class="pun">)</span><span class="pln">
</span><span class="pun">],</span></code></pre>
<p>This code adds a Column widget used to lay out the child widgets vertically. </p>
<p>The <code>crossAxisAlignment: field</code> specifies <code>CrossAxisAlignment.start</code>, which means "align the text to the leading edge."</p>
<p>The <strong>AspectRatio</strong> widget decides what shape the image takes no matter what kind of image is supplied.</p>
<p>The <strong>Padding</strong> brings the text in from the side a little.</p>
<p>The two <strong>Text</strong> widgets are stacked vertically with 8 points of empty space between them (<strong>SizedBox</strong>). We make another <strong>Column</strong> to house them inside the Padding.</p>
<p>Save your project:</p>
<table>
<tbody><tr><td colspan="1" rowspan="1"><p>Android</p>
</td><td colspan="1" rowspan="1"><p>iOS</p>
</td></tr>
<tr><td colspan="1" rowspan="1"><p class="image-container"><img style="width: 298.00px" src="./MDC-102 Flutter_ Material Structure and Layout (Flutter)_files/4ffb1e8e3bd8de3.png"></p>
</td><td colspan="1" rowspan="1"><p class="image-container"><img style="width: 298.00px" src="./MDC-102 Flutter_ Material Structure and Layout (Flutter)_files/3dd2be5afeb20072.png"></p>
</td></tr>
</tbody></table>
<p>In this preview, you can see the card is inset from the edge, with rounded corners, and a shadow (that expresses the card's elevation). The entire shape is called the "container" in Material. (Not to be confused with the actual widget class called <a href="https://docs.flutter.io/flutter/widgets/Container-class.html" target="_blank">Container</a>.) </p>
<aside class="special"><p>Aside from the container, all of the elements within cards are actually optional in Material. You can add header text, a thumbnail or avatar, subhead text, dividers, and even buttons and icons. </p>
<p>To learn more about cards' contents, see the <a href="https://material.io/guidelines/components/cards.html" target="_blank">Cards article</a> of the Material Guidelines.</p>
</aside>
<p>Cards are usually shown in a collection with other cards. Let's lay them out as a collection in a grid.</p>


      </div></div></google-codelab-step><google-codelab-step label="Make a card collection" duration="0" step="6"><div class="instructions"><div class="inner"><h2 is-upgraded="" class="step-title">6. Make a card collection</h2>
        <p>Whenever multiple cards are present in a screen, they are grouped together into one or more collections. Cards in a collection are coplanar, meaning cards share the same resting elevation as one another (unless the cards are picked up or dragged, but we won't be doing that here).</p>
<h2 is-upgraded=""><strong>Multiply the card into a collection</strong></h2>
<p>Right now our Card is constructed inline of the <code>children:</code> field of the GridView. That's a lot of nested code that can be hard to read. Let's extract it into a function that can generate as many empty cards as we want, and returns a list of Cards.</p>
<p>Make a new private function above the <code>build()</code> function (remember that functions starting with an underscore are private API):</p>
<pre><code><span class="com">// TODO: Make a collection of cards (102)</span><span class="pln">
</span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Card</span><span class="pun">&gt;</span><span class="pln"> _buildGridCards</span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> count</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Card</span><span class="pun">&gt;</span><span class="pln"> cards </span><span class="pun">=</span><span class="pln"> </span><span class="typ">List</span><span class="pun">.</span><span class="pln">generate</span><span class="pun">(</span><span class="pln">
    count</span><span class="pun">,</span><span class="pln">
    </span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> index</span><span class="pun">)</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="typ">Card</span><span class="pun">(</span><span class="pln">
      clipBehavior</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Clip</span><span class="pun">.</span><span class="pln">antiAlias</span><span class="pun">,</span><span class="pln">
      child</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Column</span><span class="pun">(</span><span class="pln">
        crossAxisAlignment</span><span class="pun">:</span><span class="pln"> </span><span class="typ">CrossAxisAlignment</span><span class="pun">.</span><span class="pln">start</span><span class="pun">,</span><span class="pln">
        children</span><span class="pun">:</span><span class="pln"> </span><span class="pun">&lt;</span><span class="typ">Widget</span><span class="pun">&gt;[</span><span class="pln">
          </span><span class="typ">AspectRatio</span><span class="pun">(</span><span class="pln">
            aspectRatio</span><span class="pun">:</span><span class="pln"> </span><span class="lit">18.0</span><span class="pln"> </span><span class="pun">/</span><span class="pln"> </span><span class="lit">11.0</span><span class="pun">,</span><span class="pln">
            child</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Image</span><span class="pun">.</span><span class="pln">asset</span><span class="pun">(</span><span class="str">'assets/diamond.png'</span><span class="pun">),</span><span class="pln">
          </span><span class="pun">),</span><span class="pln">
          </span><span class="typ">Padding</span><span class="pun">(</span><span class="pln">
            padding</span><span class="pun">:</span><span class="pln"> </span><span class="typ">EdgeInsets</span><span class="pun">.</span><span class="pln">fromLTRB</span><span class="pun">(</span><span class="lit">16.0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">12.0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">16.0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">8.0</span><span class="pun">),</span><span class="pln">
            child</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Column</span><span class="pun">(</span><span class="pln">
              crossAxisAlignment</span><span class="pun">:</span><span class="pln"> </span><span class="typ">CrossAxisAlignment</span><span class="pun">.</span><span class="pln">start</span><span class="pun">,</span><span class="pln">
              children</span><span class="pun">:</span><span class="pln"> </span><span class="pun">&lt;</span><span class="typ">Widget</span><span class="pun">&gt;[</span><span class="pln">
                </span><span class="typ">Text</span><span class="pun">(</span><span class="str">'Title'</span><span class="pun">),</span><span class="pln">
                </span><span class="typ">SizedBox</span><span class="pun">(</span><span class="pln">height</span><span class="pun">:</span><span class="pln"> </span><span class="lit">8.0</span><span class="pun">),</span><span class="pln">
                </span><span class="typ">Text</span><span class="pun">(</span><span class="str">'Secondary Text'</span><span class="pun">),</span><span class="pln">
              </span><span class="pun">],</span><span class="pln">
            </span><span class="pun">),</span><span class="pln">
          </span><span class="pun">),</span><span class="pln">
        </span><span class="pun">],</span><span class="pln">
      </span><span class="pun">),</span><span class="pln">
    </span><span class="pun">),</span><span class="pln">
  </span><span class="pun">);</span><span class="pln">

  </span><span class="kwd">return</span><span class="pln"> cards</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>Assign the generated cards to GridView's <code>children</code> field. Remember to <strong>replace everything contained in the GridView with this new code</strong>:</p>
<pre><code><span class="com">// TODO: Add a grid view (102)</span><span class="pln">
body</span><span class="pun">:</span><span class="pln"> </span><span class="typ">GridView</span><span class="pun">.</span><span class="pln">count</span><span class="pun">(</span><span class="pln">
  crossAxisCount</span><span class="pun">:</span><span class="pln"> </span><span class="lit">2</span><span class="pun">,</span><span class="pln">
  padding</span><span class="pun">:</span><span class="pln"> </span><span class="typ">EdgeInsets</span><span class="pun">.</span><span class="pln">all</span><span class="pun">(</span><span class="lit">16.0</span><span class="pun">),</span><span class="pln">
  childAspectRatio</span><span class="pun">:</span><span class="pln"> </span><span class="lit">8.0</span><span class="pln"> </span><span class="pun">/</span><span class="pln"> </span><span class="lit">9.0</span><span class="pun">,</span><span class="pln">
  children</span><span class="pun">:</span><span class="pln"> _buildGridCards</span><span class="pun">(</span><span class="lit">10</span><span class="pun">)</span><span class="pln"> </span><span class="com">// Replace</span><span class="pln">
</span><span class="pun">),</span></code></pre>
<p>Save the project:</p>
<table>
<tbody><tr><td colspan="1" rowspan="1"><p>Android</p>
</td><td colspan="1" rowspan="1"><p>iOS</p>
</td></tr>
<tr><td colspan="1" rowspan="1"><p class="image-container"><img style="width: 298.00px" src="./MDC-102 Flutter_ Material Structure and Layout (Flutter)_files/80f9295ef83cd7dd.png"></p>
</td><td colspan="1" rowspan="1"><p class="image-container"><img style="width: 298.00px" src="./MDC-102 Flutter_ Material Structure and Layout (Flutter)_files/3fcdcd16de1258b0.png"></p>
</td></tr>
</tbody></table>
<p>The cards are there, but they don't show anything yet. Now's the time to add some product data.</p>
<h2 is-upgraded=""><strong>Add product data</strong></h2>
<p>The app has some products with images, names, and prices. Let's add that to the widgets we have in the card already</p>
<p>Then, in <code>home.dart</code>, import a new package and some files we supplied for a data model:</p>
<pre><code><span class="kwd">import</span><span class="pln"> </span><span class="str">'package:flutter/material.dart'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="str">'package:intl/intl.dart'</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">import</span><span class="pln"> </span><span class="str">'model/products_repository.dart'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="str">'model/product.dart'</span><span class="pun">;</span></code></pre>
<p>Finally,  change <code>_buildGridCards()</code> to fetch the product info, and use that data in the cards:</p>
<pre><code><span class="com">// TODO: Make a collection of cards (102)</span><span class="pln">

</span><span class="com">// Replace this entire method</span><span class="pln">
</span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Card</span><span class="pun">&gt;</span><span class="pln"> _buildGridCards</span><span class="pun">(</span><span class="typ">BuildContext</span><span class="pln"> context</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Product</span><span class="pun">&gt;</span><span class="pln"> products </span><span class="pun">=</span><span class="pln"> </span><span class="typ">ProductsRepository</span><span class="pun">.</span><span class="pln">loadProducts</span><span class="pun">(</span><span class="typ">Category</span><span class="pun">.</span><span class="pln">all</span><span class="pun">);</span><span class="pln">

  </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">products </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pln"> </span><span class="pun">||</span><span class="pln"> products</span><span class="pun">.</span><span class="pln">isEmpty</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">const</span><span class="pln"> </span><span class="pun">&lt;</span><span class="typ">Card</span><span class="pun">&gt;[];</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="kwd">final</span><span class="pln"> </span><span class="typ">ThemeData</span><span class="pln"> theme </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Theme</span><span class="pun">.</span><span class="pln">of</span><span class="pun">(</span><span class="pln">context</span><span class="pun">);</span><span class="pln">
  </span><span class="kwd">final</span><span class="pln"> </span><span class="typ">NumberFormat</span><span class="pln"> formatter </span><span class="pun">=</span><span class="pln"> </span><span class="typ">NumberFormat</span><span class="pun">.</span><span class="pln">simpleCurrency</span><span class="pun">(</span><span class="pln">
      locale</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Localizations</span><span class="pun">.</span><span class="pln">localeOf</span><span class="pun">(</span><span class="pln">context</span><span class="pun">).</span><span class="pln">toString</span><span class="pun">());</span><span class="pln">

  </span><span class="kwd">return</span><span class="pln"> products</span><span class="pun">.</span><span class="pln">map</span><span class="pun">((</span><span class="pln">product</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">Card</span><span class="pun">(</span><span class="pln">
      clipBehavior</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Clip</span><span class="pun">.</span><span class="pln">antiAlias</span><span class="pun">,</span><span class="pln">
      </span><span class="com">// TODO: Adjust card heights (103)</span><span class="pln">
      child</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Column</span><span class="pun">(</span><span class="pln">
        </span><span class="com">// TODO: Center items on the card (103)</span><span class="pln">
        crossAxisAlignment</span><span class="pun">:</span><span class="pln"> </span><span class="typ">CrossAxisAlignment</span><span class="pun">.</span><span class="pln">start</span><span class="pun">,</span><span class="pln">
        children</span><span class="pun">:</span><span class="pln"> </span><span class="pun">&lt;</span><span class="typ">Widget</span><span class="pun">&gt;[</span><span class="pln">
          </span><span class="typ">AspectRatio</span><span class="pun">(</span><span class="pln">
            aspectRatio</span><span class="pun">:</span><span class="pln"> </span><span class="lit">18</span><span class="pln"> </span><span class="pun">/</span><span class="pln"> </span><span class="lit">11</span><span class="pun">,</span><span class="pln">
            child</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Image</span><span class="pun">.</span><span class="pln">asset</span><span class="pun">(</span><span class="pln">
              product</span><span class="pun">.</span><span class="pln">assetName</span><span class="pun">,</span><span class="pln">
              </span><span class="kwd">package</span><span class="pun">:</span><span class="pln"> product</span><span class="pun">.</span><span class="pln">assetPackage</span><span class="pun">,</span><span class="pln">
             </span><span class="com">// TODO: Adjust the box size (102)</span><span class="pln">
            </span><span class="pun">),</span><span class="pln">
          </span><span class="pun">),</span><span class="pln">
          </span><span class="typ">Expanded</span><span class="pun">(</span><span class="pln">
            child</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Padding</span><span class="pun">(</span><span class="pln">
              padding</span><span class="pun">:</span><span class="pln"> </span><span class="typ">EdgeInsets</span><span class="pun">.</span><span class="pln">fromLTRB</span><span class="pun">(</span><span class="lit">16.0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">12.0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">16.0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">8.0</span><span class="pun">),</span><span class="pln">
              child</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Column</span><span class="pun">(</span><span class="pln">
               </span><span class="com">// TODO: Align labels to the bottom and center (103)</span><span class="pln">
               crossAxisAlignment</span><span class="pun">:</span><span class="pln"> </span><span class="typ">CrossAxisAlignment</span><span class="pun">.</span><span class="pln">start</span><span class="pun">,</span><span class="pln">
                </span><span class="com">// TODO: Change innermost Column (103)</span><span class="pln">
                children</span><span class="pun">:</span><span class="pln"> </span><span class="pun">&lt;</span><span class="typ">Widget</span><span class="pun">&gt;[</span><span class="pln">
                 </span><span class="com">// TODO: Handle overflowing labels (103)</span><span class="pln">
                 </span><span class="typ">Text</span><span class="pun">(</span><span class="pln">
                    product</span><span class="pun">.</span><span class="pln">name</span><span class="pun">,</span><span class="pln">
                    style</span><span class="pun">:</span><span class="pln"> theme</span><span class="pun">.</span><span class="pln">textTheme</span><span class="pun">.</span><span class="pln">title</span><span class="pun">,</span><span class="pln">
                    maxLines</span><span class="pun">:</span><span class="pln"> </span><span class="lit">1</span><span class="pun">,</span><span class="pln">
                  </span><span class="pun">),</span><span class="pln">
                  </span><span class="typ">SizedBox</span><span class="pun">(</span><span class="pln">height</span><span class="pun">:</span><span class="pln"> </span><span class="lit">8.0</span><span class="pun">),</span><span class="pln">
                  </span><span class="typ">Text</span><span class="pun">(</span><span class="pln">
                    formatter</span><span class="pun">.</span><span class="pln">format</span><span class="pun">(</span><span class="pln">product</span><span class="pun">.</span><span class="pln">price</span><span class="pun">),</span><span class="pln">
                    style</span><span class="pun">:</span><span class="pln"> theme</span><span class="pun">.</span><span class="pln">textTheme</span><span class="pun">.</span><span class="pln">body2</span><span class="pun">,</span><span class="pln">
                  </span><span class="pun">),</span><span class="pln">
                </span><span class="pun">],</span><span class="pln">
              </span><span class="pun">),</span><span class="pln">
            </span><span class="pun">),</span><span class="pln">
          </span><span class="pun">),</span><span class="pln">
        </span><span class="pun">],</span><span class="pln">
      </span><span class="pun">),</span><span class="pln">
    </span><span class="pun">);</span><span class="pln">
  </span><span class="pun">}).</span><span class="pln">toList</span><span class="pun">();</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p><strong>NOTE:</strong> Won't compile and run yet. We have one more change.</p>
<aside class="special"><p>To style the Text, we use the <strong>ThemeData</strong> from the current <strong>BuildContext</strong>.</p>
<p>To learn more about text styling, see the <a href="https://material.io/design/typography/" target="_blank">Typography article</a> of the Material Guidelines. To learn more about Theming, continue after this codelab with <a href="http://go/mdc-103-flutter" target="_blank">MDC-103: Material Theming with Color, Shape, Elevation and Type</a>.</p>
</aside>
<p>Also, change the <code>build()</code> function to pass the <strong>BuildContext</strong> to <code>_buildGridCards()</code> before you try to compile:</p>
<pre><code><span class="com">// TODO: Add a grid view (102)</span><span class="pln">
body</span><span class="pun">:</span><span class="pln"> </span><span class="typ">GridView</span><span class="pun">.</span><span class="pln">count</span><span class="pun">(</span><span class="pln">
  crossAxisCount</span><span class="pun">:</span><span class="pln"> </span><span class="lit">2</span><span class="pun">,</span><span class="pln">
  padding</span><span class="pun">:</span><span class="pln"> </span><span class="typ">EdgeInsets</span><span class="pun">.</span><span class="pln">all</span><span class="pun">(</span><span class="lit">16.0</span><span class="pun">),</span><span class="pln">
  childAspectRatio</span><span class="pun">:</span><span class="pln"> </span><span class="lit">8.0</span><span class="pln"> </span><span class="pun">/</span><span class="pln"> </span><span class="lit">9.0</span><span class="pun">,</span><span class="pln">
  children</span><span class="pun">:</span><span class="pln"> _buildGridCards</span><span class="pun">(</span><span class="pln">context</span><span class="pun">)</span><span class="pln"> </span><span class="com">// Changed code</span><span class="pln">
</span><span class="pun">),</span></code></pre>
<table>
<tbody><tr><td colspan="1" rowspan="1"><p>Android</p>
</td><td colspan="1" rowspan="1"><p>iOS</p>
</td></tr>
<tr><td colspan="1" rowspan="1"><p class="image-container"><img style="width: 298.00px" src="./MDC-102 Flutter_ Material Structure and Layout (Flutter)_files/b33fb97d7e0ab5a.png"></p>
</td><td colspan="1" rowspan="1"><p class="image-container"><img style="width: 298.00px" src="./MDC-102 Flutter_ Material Structure and Layout (Flutter)_files/ed300dbff82271fa.png"></p>
</td></tr>
</tbody></table>
<p>You may notice we don't add any vertical space between the cards. That's because they have, by default, 4 points of padding on their top and bottom.</p>
<p>Save your project:</p>
<p>The product data shows up, but the images have extra space around them. The images are drawn with a <strong>BoxFit</strong> of <code>.scaleDown</code> by default (in this case). Let's change that to <code>.fitWidth</code> so they zoom in a little and remove  the extra whitespace.</p>
<p>Add a <code>fit:</code> field to the image with a value of <code>BoxFit.fitWidth</code>:</p>
<pre><code><span class="pln">  </span><span class="com">// TODO: Adjust the box size (102)</span><span class="pln">
  fit</span><span class="pun">:</span><span class="pln"> </span><span class="typ">BoxFit</span><span class="pun">.</span><span class="pln">fitWidth</span><span class="pun">,</span></code></pre>
<table>
<tbody><tr><td colspan="1" rowspan="1"><p>Android</p>
</td><td colspan="1" rowspan="1"><p>iOS</p>
</td></tr>
<tr><td colspan="1" rowspan="1"><p class="image-container"><img style="width: 298.00px" src="./MDC-102 Flutter_ Material Structure and Layout (Flutter)_files/24cb72fa03ad9b0a.png"></p>
</td><td colspan="1" rowspan="1"><p class="image-container"><img style="width: 298.00px" src="./MDC-102 Flutter_ Material Structure and Layout (Flutter)_files/e09674a29793cbc3.png"></p>
</td></tr>
</tbody></table>
<p>Our products are now showing up in the app perfectly!</p>


      </div></div></google-codelab-step><google-codelab-step label="Recap" duration="0" step="7"><div class="instructions"><div class="inner"><h2 is-upgraded="" class="step-title">7. Recap</h2>
        <p>Our app has a basic flow that takes the user from the login screen to a home screen, where products can be viewed. In just a few lines of code, we added a top app bar (with a title and three buttons) and cards (to present our app's content). Our home screen is now simple and functional, with a basic structure and actionable content.</p>
<aside class="special"><p>The completed MDC-102 app is available in the <code>103-starter_and_102-complete</code> branch. </p>
<p>You can test your version of the page against the app in that branch.</p>
</aside>
<h2 is-upgraded=""><strong>Next steps</strong></h2>
<p>With the top app bar, card, text field, and button, we've now used four core components from the MDC-Flutter library! You can explore even more components by visiting the <a href="https://flutter.io/widgets/" target="_blank">Flutter Widgets Catalog</a>. </p>
<p>While it's fully functioning, our app doesn't yet express any particular brand or point of view. In <a href="https://codelabs.developers.google.com/codelabs/mdc-103-flutter" target="_blank">MDC-103: Material Design Theming with Color, Shape, Elevation and Type</a>, we'll customize the style of these components to express a vibrant, modern brand.</p>
<p><a href="https://codelabs.developers.google.com/codelabs/mdc-103-flutter" target="_blank"><paper-button class="colored" raised="">Next codelab</paper-button></a></p>
<google-codelab-survey survey-id="mdc-102-flutter-2" upgraded="">




<div class="survey-questions" survey-name="mdc-102-flutter-2"><div class="survey-question-wrapper"><h4>I was able to complete this codelab with a reasonable amount of time and effort</h4><div class="survey-question-options"><label class="survey-option-wrapper" id="i-was-able-to-complete-this-codelab-with-a-reasonable-amount-of-time-and-effort--strongly-agree-label" for="i-was-able-to-complete-this-codelab-with-a-reasonable-amount-of-time-and-effort--strongly-agree"><span class="option-text">Strongly agree</span><input type="radio" id="i-was-able-to-complete-this-codelab-with-a-reasonable-amount-of-time-and-effort--strongly-agree" name="I was able to complete this codelab with a reasonable amount of time and effort"><span class="custom-radio-button"></span></label><label class="survey-option-wrapper" id="i-was-able-to-complete-this-codelab-with-a-reasonable-amount-of-time-and-effort--agree-label" for="i-was-able-to-complete-this-codelab-with-a-reasonable-amount-of-time-and-effort--agree"><span class="option-text">Agree</span><input type="radio" id="i-was-able-to-complete-this-codelab-with-a-reasonable-amount-of-time-and-effort--agree" name="I was able to complete this codelab with a reasonable amount of time and effort"><span class="custom-radio-button"></span></label><label class="survey-option-wrapper" id="i-was-able-to-complete-this-codelab-with-a-reasonable-amount-of-time-and-effort--neutral-label" for="i-was-able-to-complete-this-codelab-with-a-reasonable-amount-of-time-and-effort--neutral"><span class="option-text">Neutral</span><input type="radio" id="i-was-able-to-complete-this-codelab-with-a-reasonable-amount-of-time-and-effort--neutral" name="I was able to complete this codelab with a reasonable amount of time and effort"><span class="custom-radio-button"></span></label><label class="survey-option-wrapper" id="i-was-able-to-complete-this-codelab-with-a-reasonable-amount-of-time-and-effort--disagree-label" for="i-was-able-to-complete-this-codelab-with-a-reasonable-amount-of-time-and-effort--disagree"><span class="option-text">Disagree</span><input type="radio" id="i-was-able-to-complete-this-codelab-with-a-reasonable-amount-of-time-and-effort--disagree" name="I was able to complete this codelab with a reasonable amount of time and effort"><span class="custom-radio-button"></span></label><label class="survey-option-wrapper" id="i-was-able-to-complete-this-codelab-with-a-reasonable-amount-of-time-and-effort--strongly-disagree-label" for="i-was-able-to-complete-this-codelab-with-a-reasonable-amount-of-time-and-effort--strongly-disagree"><span class="option-text">Strongly disagree</span><input type="radio" id="i-was-able-to-complete-this-codelab-with-a-reasonable-amount-of-time-and-effort--strongly-disagree" name="I was able to complete this codelab with a reasonable amount of time and effort"><span class="custom-radio-button"></span></label></div></div><div class="survey-question-wrapper"><h4>I would like to continue using Material Components in the future</h4><div class="survey-question-options"><label class="survey-option-wrapper" id="i-would-like-to-continue-using-material-components-in-the-future--strongly-agree-label" for="i-would-like-to-continue-using-material-components-in-the-future--strongly-agree"><span class="option-text">Strongly agree</span><input type="radio" id="i-would-like-to-continue-using-material-components-in-the-future--strongly-agree" name="I would like to continue using Material Components in the future"><span class="custom-radio-button"></span></label><label class="survey-option-wrapper" id="i-would-like-to-continue-using-material-components-in-the-future--agree-label" for="i-would-like-to-continue-using-material-components-in-the-future--agree"><span class="option-text">Agree</span><input type="radio" id="i-would-like-to-continue-using-material-components-in-the-future--agree" name="I would like to continue using Material Components in the future"><span class="custom-radio-button"></span></label><label class="survey-option-wrapper" id="i-would-like-to-continue-using-material-components-in-the-future--neutral-label" for="i-would-like-to-continue-using-material-components-in-the-future--neutral"><span class="option-text">Neutral</span><input type="radio" id="i-would-like-to-continue-using-material-components-in-the-future--neutral" name="I would like to continue using Material Components in the future"><span class="custom-radio-button"></span></label><label class="survey-option-wrapper" id="i-would-like-to-continue-using-material-components-in-the-future--disagree-label" for="i-would-like-to-continue-using-material-components-in-the-future--disagree"><span class="option-text">Disagree</span><input type="radio" id="i-would-like-to-continue-using-material-components-in-the-future--disagree" name="I would like to continue using Material Components in the future"><span class="custom-radio-button"></span></label><label class="survey-option-wrapper" id="i-would-like-to-continue-using-material-components-in-the-future--strongly-disagree-label" for="i-would-like-to-continue-using-material-components-in-the-future--strongly-disagree"><span class="option-text">Strongly disagree</span><input type="radio" id="i-would-like-to-continue-using-material-components-in-the-future--strongly-disagree" name="I would like to continue using Material Components in the future"><span class="custom-radio-button"></span></label></div></div></div></google-codelab-survey>


      </div></div></google-codelab-step></div><div id="controls"><div id="fabs"><a href="https://codelabs.developers.google.com/codelabs/mdc-102-flutter/#" id="previous-step" title="Previous step" disappear="">Back</a><div class="spacer"></div><a href="https://codelabs.developers.google.com/codelabs/mdc-102-flutter/#" id="next-step" title="Next step">Next</a><a href="https://codelabs.developers.google.com/" id="done" hidden="" title="Codelab complete">Done</a></div></div></div></google-codelab>

  <script src="./MDC-102 Flutter_ Material Structure and Layout (Flutter)_files/native-shim.js"></script>
  <script src="./MDC-102 Flutter_ Material Structure and Layout (Flutter)_files/custom-elements.min.js"></script>
  <script src="./MDC-102 Flutter_ Material Structure and Layout (Flutter)_files/prettify.js"></script>
  <script src="./MDC-102 Flutter_ Material Structure and Layout (Flutter)_files/codelab-elements.js"></script>



</body></html>